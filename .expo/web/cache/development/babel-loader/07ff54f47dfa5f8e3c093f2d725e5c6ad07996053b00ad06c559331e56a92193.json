{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState } from 'react';\nimport { Text, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Matching(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOptions = _useState2[0],\n    setSelectedOptions = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedValues = _useState4[0],\n    setSelectedValues = _useState4[1];\n  var handleOptionPress = function handleOptionPress(item, option) {\n    var prompt = item.prompt;\n    var newSelectedOptions = _objectSpread({}, selectedOptions);\n    if (newSelectedOptions[prompt]) {\n      newSelectedOptions[prompt].push(option);\n    } else {\n      newSelectedOptions[prompt] = [option];\n    }\n    setSelectedOptions(newSelectedOptions);\n  };\n  var handleValuePress = function handleValuePress(item, value) {\n    setSelectedValues(function (prevSelectedValues) {\n      return _objectSpread(_objectSpread({}, prevSelectedValues), {}, _defineProperty({}, item.prompt, value.value));\n    });\n  };\n  var handleCheckAnswers = function handleCheckAnswers() {\n    var isAllMatched = triviaItems.every(function (item) {\n      return item.answer && item.answer.every(function (option) {\n        return selectedOptions[item.prompt] === option.option && selectedValues[item.prompt] === option.value;\n      });\n    });\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n  var isOptionSelected = function isOptionSelected(prompt, option) {\n    var triviaItem = selectedOptions.find(function (item) {\n      return item.prompt === prompt;\n    });\n    if (triviaItem) {\n      var selectedOption = triviaItem.answer.find(function (answerOption) {\n        return answerOption.isSelected;\n      });\n      return selectedOption && selectedOption.option === option;\n    }\n    return false;\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      children: [_jsx(Text, {\n        children: item.prompt\n      }), item.answer.map(function (option, index) {\n        var prompt = item.prompt;\n        var isOptionSelected = selectedOptions[prompt] && selectedOptions[prompt].some(function (selectedOption) {\n          return selectedOption.option === option.option;\n        });\n        var isValueSelected = selectedValues[prompt] === option.value;\n        return _jsxs(View, {\n          children: [_jsx(Button, {\n            onPress: function onPress() {\n              return handleOptionPress(item, option);\n            },\n            style: {\n              backgroundColor: isOptionSelected ? 'green' : 'white'\n            },\n            children: option.option\n          }), _jsx(Button, {\n            onPress: function onPress() {\n              return handleValuePress(item, option);\n            },\n            style: {\n              backgroundColor: isValueSelected ? 'green' : 'white'\n            },\n            children: option.value\n          })]\n        }, index);\n      })]\n    });\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: triviaName\n    }), _jsx(FlatList, {\n      data: triviaItems,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.prompt;\n      }\n    }), _jsx(Button, {\n      onPress: handleCheckAnswers,\n      children: _jsx(Text, {\n        children: \"Check Answers\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","Text","Button","View","FlatList","jsx","_jsx","jsxs","_jsxs","Matching","_ref","route","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","selectedOptions","setSelectedOptions","_useState3","_useState4","selectedValues","setSelectedValues","handleOptionPress","item","option","prompt","newSelectedOptions","_objectSpread","push","handleValuePress","value","prevSelectedValues","_defineProperty","handleCheckAnswers","isAllMatched","every","answer","alert","isOptionSelected","triviaItem","find","selectedOption","answerOption","isSelected","renderItem","_ref2","children","map","index","some","isValueSelected","onPress","style","backgroundColor","data","keyExtractor"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Button } from '@rneui/themed'\nimport { View, FlatList } from 'react-native'\n\n\nexport default function Matching({ route }) {\n  const { triviaName, triviaItems } = route.params;\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [selectedValues, setSelectedValues] = useState({});\n\n  const handleOptionPress = (item, option) => {\n    const prompt = item.prompt;\n    const newSelectedOptions = { ...selectedOptions };\n    if (newSelectedOptions[prompt]) {\n      // There's already one selected option for this prompt, so add the new one\n      newSelectedOptions[prompt].push(option);\n    } else {\n      // This is the first selected option for this prompt\n      newSelectedOptions[prompt] = [option];\n    }\n    setSelectedOptions(newSelectedOptions);\n  }\n\n  const handleValuePress = (item, value) => {\n    setSelectedValues((prevSelectedValues) => ({\n      ...prevSelectedValues,\n      [item.prompt]: value.value,\n    }));\n  };\n\n  const handleCheckAnswers = () => {\n    const isAllMatched = triviaItems.every(\n      (item) =>\n        item.answer &&\n        item.answer.every(\n          (option) =>\n            selectedOptions[item.prompt] === option.option &&\n            selectedValues[item.prompt] === option.value\n        )\n    );\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n\n  const isOptionSelected = (prompt, option) => {\n    const triviaItem = selectedOptions.find((item) => item.prompt === prompt);\n    if (triviaItem) {\n      const selectedOption = triviaItem.answer.find((answerOption) => answerOption.isSelected);\n      return selectedOption && selectedOption.option === option;\n    }\n    return false;\n  };\n\n  \n  const renderItem = ({ item }) => (\n    <View>\n      <Text>{item.prompt}</Text>\n      {item.answer.map((option, index) => {\n        const prompt = item.prompt;\n        const isOptionSelected = (\n          selectedOptions[prompt] &&\n          selectedOptions[prompt].some(\n            selectedOption => selectedOption.option === option.option\n          )\n        );\n        const isValueSelected = (\n          selectedValues[prompt] === option.value\n        );\n        return (\n          <View key={index}>\n            <Button\n              onPress={() => handleOptionPress(item, option)}\n              style={{\n                backgroundColor: isOptionSelected ? 'green' : 'white',\n              }}\n            >\n              {option.option}\n            </Button>\n            <Button\n              onPress={() => handleValuePress(item, option)}\n              style={{\n                backgroundColor: isValueSelected ? 'green' : 'white',\n              }}\n            >\n              {option.value}\n            </Button>\n          </View>\n        );\n      })}\n    </View>\n  );\n\n  return (\n    <View>\n      <Text>{triviaName}</Text>\n      <FlatList\n        data={triviaItems}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.prompt}\n      />\n      <Button onPress={handleCheckAnswers}>\n        <Text>Check Answers</Text>\n      </Button>\n    </View>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}