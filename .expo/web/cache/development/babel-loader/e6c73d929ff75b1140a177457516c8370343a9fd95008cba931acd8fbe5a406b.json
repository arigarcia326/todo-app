{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState } from 'react';\nimport { Text, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Matching(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOptions = _useState2[0],\n    setSelectedOptions = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedValues = _useState4[0],\n    setSelectedValues = _useState4[1];\n  var handleOptionPress = function handleOptionPress(item, option) {\n    var updatedSelectedOptions = selectedOptions.map(function (triviaItem) {\n      if (triviaItem.prompt === item.prompt) {\n        var updatedAnswer = triviaItem.answer.map(function (answerOption) {\n          if (answerOption.value === option.value) {\n            return _objectSpread(_objectSpread({}, answerOption), {}, {\n              isSelected: true\n            });\n          } else if (answerOption.isSelected) {\n            return _objectSpread(_objectSpread({}, answerOption), {}, {\n              isSelected: false\n            });\n          } else {\n            return answerOption;\n          }\n        });\n        return _objectSpread(_objectSpread({}, triviaItem), {}, {\n          answer: updatedAnswer\n        });\n      } else {\n        return triviaItem;\n      }\n    });\n    setSelectedOptions(updatedSelectedOptions);\n  };\n  var handleValuePress = function handleValuePress(item, value) {\n    setSelectedValues(function (prevSelectedValues) {\n      return _objectSpread(_objectSpread({}, prevSelectedValues), {}, _defineProperty({}, item.prompt, value.value));\n    });\n  };\n  var handleCheckAnswers = function handleCheckAnswers() {\n    var isAllMatched = triviaItems.every(function (item) {\n      return item.answer && item.answer.every(function (option) {\n        return selectedOptions[item.prompt] === option.option && selectedValues[item.prompt] === option.value;\n      });\n    });\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      children: [_jsx(Text, {\n        children: item.prompt\n      }), item.answer.map(function (option, index) {\n        return _jsxs(View, {\n          children: [_jsx(Button, {\n            onPress: function onPress() {\n              return handleOptionPress(item, option);\n            },\n            style: {\n              backgroundColor: selectedOptions[item.prompt] === option.option ? 'green' : 'white'\n            },\n            children: option.option\n          }), _jsx(Button, {\n            onPress: function onPress() {\n              return handleValuePress(item, option);\n            },\n            style: {\n              backgroundColor: selectedValues[item.prompt] === option.value ? 'green' : 'white'\n            },\n            children: option.value\n          })]\n        }, index);\n      })]\n    });\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: triviaName\n    }), _jsx(FlatList, {\n      data: triviaItems,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.prompt;\n      }\n    }), _jsx(Button, {\n      onPress: handleCheckAnswers,\n      children: _jsx(Text, {\n        children: \"Check Answers\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","Text","Button","View","FlatList","jsx","_jsx","jsxs","_jsxs","Matching","_ref","route","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","selectedOptions","setSelectedOptions","_useState3","_useState4","selectedValues","setSelectedValues","handleOptionPress","item","option","updatedSelectedOptions","map","triviaItem","prompt","updatedAnswer","answer","answerOption","value","_objectSpread","isSelected","handleValuePress","prevSelectedValues","_defineProperty","handleCheckAnswers","isAllMatched","every","alert","renderItem","_ref2","children","index","onPress","style","backgroundColor","data","keyExtractor"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Button } from '@rneui/themed'\nimport { View, FlatList } from 'react-native'\n\n\nexport default function Matching({ route }) {\n  const { triviaName, triviaItems } = route.params;\n\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [selectedValues, setSelectedValues] = useState({});\n\n  const handleOptionPress = (item, option) => {\n    const updatedSelectedOptions = selectedOptions.map(triviaItem => {\n      if (triviaItem.prompt === item.prompt) {\n        const updatedAnswer = triviaItem.answer.map(answerOption => {\n          if (answerOption.value === option.value) {\n            return { ...answerOption, isSelected: true };\n          } else if (answerOption.isSelected) {\n            return { ...answerOption, isSelected: false };\n          } else {\n            return answerOption;\n          }\n        });\n        return { ...triviaItem, answer: updatedAnswer };\n      } else {\n        return triviaItem;\n      }\n    });\n    setSelectedOptions(updatedSelectedOptions);\n  };\n\n  const handleValuePress = (item, value) => {\n    setSelectedValues((prevSelectedValues) => ({\n      ...prevSelectedValues,\n      [item.prompt]: value.value,\n    }));\n  };\n\n  const handleCheckAnswers = () => {\n    const isAllMatched = triviaItems.every(\n      (item) =>\n        item.answer &&\n        item.answer.every(\n          (option) =>\n            selectedOptions[item.prompt] === option.option &&\n            selectedValues[item.prompt] === option.value\n        )\n    );\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n\n  const renderItem = ({ item }) => (\n    <View>\n      <Text>{item.prompt}</Text>\n      {item.answer.map((option, index) => (\n        <View key={index}>\n          <Button\n            onPress={() => handleOptionPress(item, option)}\n            style={{\n              backgroundColor:\n                selectedOptions[item.prompt] === option.option\n                  ? 'green'\n                  : 'white',\n            }}\n          >\n            {option.option}\n          </Button>\n          <Button\n            onPress={() => handleValuePress(item, option)}\n            style={{\n              backgroundColor:\n                selectedValues[item.prompt] === option.value\n                  ? 'green'\n                  : 'white',\n            }}\n          >\n            {option.value}\n          </Button>\n        </View>\n      ))}\n    </View>\n  );\n\n  return (\n    <View>\n      <Text>{triviaName}</Text>\n      <FlatList\n        data={triviaItems}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.prompt}\n      />\n      <Button onPress={handleCheckAnswers}>\n        <Text>Check Answers</Text>\n      </Button>\n    </View>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}