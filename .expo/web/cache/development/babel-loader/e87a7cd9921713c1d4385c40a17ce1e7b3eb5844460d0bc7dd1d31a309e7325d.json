{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Text, Input, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport { triviaData } from \"../../data/data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function userInput(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestionIndex = _useState2[0],\n    setCurrentQuestionIndex = _useState2[1];\n  var _useState3 = useState(Array(triviaItems.length).fill(\"\")),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userAnswers = _useState4[0],\n    setUserAnswers = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showSummary = _useState6[0],\n    setShowSummary = _useState6[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    if (currentQuestionIndex < triviaItems.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setShowSummary(true);\n    }\n  };\n  var handleAnswerChange = function handleAnswerChange(text) {\n    var newAnswers = _toConsumableArray(userAnswers);\n    newAnswers[currentQuestionIndex] = text;\n    setUserAnswers(newAnswers);\n  };\n  if (showSummary) {\n    return _jsx(Summary, {\n      triviaItems: triviaItems,\n      userAnswers: userAnswers\n    });\n  }\n  return _jsxs(View, {\n    children: [_jsx(Taxt, {\n      children: triviaName\n    }), _jsx(Text, {\n      children: triviaItems[currentQuestionIndex].prompt\n    }), _jsx(Input, {\n      value: userAnswers[currentQuestionIndex],\n      onChangeText: handleAnswerChange\n    }), _jsx(Button, {\n      title: \"Next\",\n      onPress: handleNextQuestion\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","Text","Input","Button","View","triviaData","jsx","_jsx","jsxs","_jsxs","userInput","_ref","route","navigation","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","currentQuestionIndex","setCurrentQuestionIndex","_useState3","Array","length","fill","_useState4","userAnswers","setUserAnswers","_useState5","_useState6","showSummary","setShowSummary","handleNextQuestion","handleAnswerChange","text","newAnswers","_toConsumableArray","Summary","children","Taxt","prompt","value","onChangeText","title","onPress"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/userInput/userInput.js"],"sourcesContent":["import React, {useState} from 'react'\nimport { Text, Input, Button } from '@rneui/themed'\nimport { View } from 'react-native';\nimport { triviaData } from '../../data/data';\n\nexport default function userInput ({route, navigation}) {\n  const { triviaName, triviaItems } = route.params;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState(Array(triviaItems.length).fill(\"\"));\n  const [showSummary, setShowSummary] = useState(false);\n\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < triviaItems.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setShowSummary(true);\n    }\n  };\n\n  const handleAnswerChange = (text) => {\n    const newAnswers = [...userAnswers];\n    newAnswers[currentQuestionIndex] = text;\n    setUserAnswers(newAnswers);\n  };\n\n  if (showSummary) {\n    return <Summary triviaItems={triviaItems} userAnswers={userAnswers} />;\n  }\n\n  return (\n    <View>\n      <Taxt>{triviaName}</Taxt>\n      <Text>{triviaItems[currentQuestionIndex].prompt}</Text>\n      <Input value={userAnswers[currentQuestionIndex]} onChangeText={handleAnswerChange} />\n      <Button title=\"Next\" onPress={handleNextQuestion} />\n    </View>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,IAAI,EAAEC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AAAA,OAAAC,IAAA;AAEnD,SAASC,UAAU;AAA0B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE7C,eAAe,SAASC,SAASA,CAAAC,IAAA,EAAuB;EAAA,IAApBC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EACnD,IAAAC,aAAA,GAAoCF,KAAK,CAACG,MAAM;IAAxCC,UAAU,GAAAF,aAAA,CAAVE,UAAU;IAAEC,WAAW,GAAAH,aAAA,CAAXG,WAAW;EAC/B,IAAAC,SAAA,GAAwDlB,QAAQ,CAAC,CAAC,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5DG,oBAAoB,GAAAF,UAAA;IAAEG,uBAAuB,GAAAH,UAAA;EACpD,IAAAI,UAAA,GAAsCvB,QAAQ,CAACwB,KAAK,CAACP,WAAW,CAACQ,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;IAAAC,UAAA,GAAAP,cAAA,CAAAG,UAAA;IAA3EK,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAClC,IAAAG,UAAA,GAAsC9B,QAAQ,CAAC,KAAK,CAAC;IAAA+B,UAAA,GAAAX,cAAA,CAAAU,UAAA;IAA9CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAElC,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/B,IAAIb,oBAAoB,GAAGJ,WAAW,CAACQ,MAAM,GAAG,CAAC,EAAE;MACjDH,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD,CAAC,MAAM;MACLY,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,IAAME,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,IAAI,EAAK;IACnC,IAAMC,UAAU,GAAAC,kBAAA,CAAOV,WAAW,CAAC;IACnCS,UAAU,CAAChB,oBAAoB,CAAC,GAAGe,IAAI;IACvCP,cAAc,CAACQ,UAAU,CAAC;EAC5B,CAAC;EAED,IAAIL,WAAW,EAAE;IACf,OAAOzB,IAAA,CAACgC,OAAO;MAACtB,WAAW,EAAEA,WAAY;MAACW,WAAW,EAAEA;IAAY,EAAG;EACxE;EAEA,OACEnB,KAAA,CAACL,IAAI;IAAAoC,QAAA,GACHjC,IAAA,CAACkC,IAAI;MAAAD,QAAA,EAAExB;IAAU,EAAQ,EACzBT,IAAA,CAACN,IAAI;MAAAuC,QAAA,EAAEvB,WAAW,CAACI,oBAAoB,CAAC,CAACqB;IAAM,EAAQ,EACvDnC,IAAA,CAACL,KAAK;MAACyC,KAAK,EAAEf,WAAW,CAACP,oBAAoB,CAAE;MAACuB,YAAY,EAAET;IAAmB,EAAG,EACrF5B,IAAA,CAACJ,MAAM;MAAC0C,KAAK,EAAC,MAAM;MAACC,OAAO,EAAEZ;IAAmB,EAAG;EAAA,EAC/C;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}