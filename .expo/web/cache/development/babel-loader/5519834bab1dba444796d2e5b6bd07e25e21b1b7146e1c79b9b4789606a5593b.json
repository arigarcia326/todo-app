{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Text, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Matching(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    matchedItems = _useState2[0],\n    setMatchedItems = _useState2[1];\n  var handleItemPress = function handleItemPress(item) {\n    var updatedMatchedItems = [].concat(_toConsumableArray(matchedItems), [item]);\n    setMatchedItems(updatedMatchedItems);\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      children: [_jsx(Text, {\n        children: item.prompt\n      }), item.answer.map(function (option, index) {\n        return _jsxs(View, {\n          children: [_jsx(Button, {\n            children: option.option\n          }), _jsx(Button, {\n            children: option.value\n          })]\n        }, index);\n      })]\n    });\n  };\n  var handleCheckAnswers = function handleCheckAnswers() {\n    var isAllMatched = triviaItems.every(function (item) {\n      return matchedItems.includes(item);\n    });\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: triviaName\n    }), _jsx(FlatList, {\n      data: triviaItems,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.prompt;\n      }\n    }), _jsx(Button, {\n      onPress: handleCheckAnswers,\n      children: _jsx(Text, {\n        children: \"Check Answers\"\n      })\n    })]\n  });\n}\n;","map":{"version":3,"names":["React","useState","Text","Button","View","FlatList","jsx","_jsx","jsxs","_jsxs","Matching","_ref","route","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","matchedItems","setMatchedItems","handleItemPress","item","updatedMatchedItems","concat","_toConsumableArray","renderItem","_ref2","children","prompt","answer","map","option","index","value","handleCheckAnswers","isAllMatched","every","includes","alert","data","keyExtractor","onPress"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Button } from '@rneui/themed'\nimport { View, FlatList } from 'react-native'\n\n\nexport default function Matching ({ route }) {\n  const { triviaName, triviaItems } = route.params;\n  const [matchedItems, setMatchedItems] = useState([]);\n\n  const handleItemPress = (item) => {\n    const updatedMatchedItems = [...matchedItems, item];\n    setMatchedItems(updatedMatchedItems);\n  };\n\n  const renderItem = ({ item }) => (\n    <View>\n      <Text>{item.prompt}</Text>\n      {item.answer.map((option, index) => (\n        <View key={index}>\n          <Button>{option.option}</Button>\n          <Button>{option.value}</Button>\n        </View>\n      ))}\n    </View>\n  )\n\n\n  const handleCheckAnswers = () => {\n    const isAllMatched = triviaItems.every((item) => matchedItems.includes(item));\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n\n  return (\n    <View >\n      <Text>{triviaName}</Text>\n      <FlatList\n        data={triviaItems}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.prompt}\n      />\n      <Button onPress={handleCheckAnswers}>\n        <Text>Check Answers</Text>\n      </Button>\n    </View>\n  );\n};\n\n\n\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,MAAM,QAAQ,eAAe;AAAA,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAI5C,eAAe,SAASC,QAAQA,CAAAC,IAAA,EAAa;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACvC,IAAAC,aAAA,GAAoCD,KAAK,CAACE,MAAM;IAAxCC,UAAU,GAAAF,aAAA,CAAVE,UAAU;IAAEC,WAAW,GAAAH,aAAA,CAAXG,WAAW;EAC/B,IAAAC,SAAA,GAAwChB,QAAQ,CAAC,EAAE,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7CG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EAEpC,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,IAAI,EAAK;IAChC,IAAMC,mBAAmB,MAAAC,MAAA,CAAAC,kBAAA,CAAON,YAAY,IAAEG,IAAI,EAAC;IACnDF,eAAe,CAACG,mBAAmB,CAAC;EACtC,CAAC;EAED,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAAC,KAAA;IAAA,IAAML,IAAI,GAAAK,KAAA,CAAJL,IAAI;IAAA,OACxBd,KAAA,CAACL,IAAI;MAAAyB,QAAA,GACHtB,IAAA,CAACL,IAAI;QAAA2B,QAAA,EAAEN,IAAI,CAACO;MAAM,EAAQ,EACzBP,IAAI,CAACQ,MAAM,CAACC,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK;QAAA,OAC7BzB,KAAA,CAACL,IAAI;UAAAyB,QAAA,GACHtB,IAAA,CAACJ,MAAM;YAAA0B,QAAA,EAAEI,MAAM,CAACA;UAAM,EAAU,EAChC1B,IAAA,CAACJ,MAAM;YAAA0B,QAAA,EAAEI,MAAM,CAACE;UAAK,EAAU;QAAA,GAFtBD,KAAK,CAGT;MAAA,CACR,CAAC;IAAA,EACG;EAAA,CACR;EAGD,IAAME,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/B,IAAMC,YAAY,GAAGrB,WAAW,CAACsB,KAAK,CAAC,UAACf,IAAI;MAAA,OAAKH,YAAY,CAACmB,QAAQ,CAAChB,IAAI,CAAC;IAAA,EAAC;IAC7E,IAAIc,YAAY,EAAE;MAChBG,KAAK,CAAC,wBAAwB,CAAC;IACjC,CAAC,MAAM;MACLA,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAED,OACE/B,KAAA,CAACL,IAAI;IAAAyB,QAAA,GACHtB,IAAA,CAACL,IAAI;MAAA2B,QAAA,EAAEd;IAAU,EAAQ,EACzBR,IAAA,CAACF,QAAQ;MACPoC,IAAI,EAAEzB,WAAY;MAClBW,UAAU,EAAEA,UAAW;MACvBe,YAAY,EAAE,SAAAA,aAACnB,IAAI;QAAA,OAAKA,IAAI,CAACO,MAAM;MAAA;IAAC,EACpC,EACFvB,IAAA,CAACJ,MAAM;MAACwC,OAAO,EAAEP,kBAAmB;MAAAP,QAAA,EAClCtB,IAAA,CAACL,IAAI;QAAA2B,QAAA,EAAC;MAAa;IAAO,EACnB;EAAA,EACJ;AAEX;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}