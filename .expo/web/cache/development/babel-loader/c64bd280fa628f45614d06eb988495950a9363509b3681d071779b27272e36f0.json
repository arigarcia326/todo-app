{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Text, Input, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Summary from \"../Summary/Summary\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function UserInput(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestionIndex = _useState2[0],\n    setCurrentQuestionIndex = _useState2[1];\n  var _useState3 = useState(Array(triviaItems.length).fill(\"\")),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userAnswers = _useState4[0],\n    setUserAnswers = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showSummary = _useState6[0],\n    setShowSummary = _useState6[1];\n  var nextQuestion = function nextQuestion() {\n    if (currentQuestionIndex < triviaItems.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setShowSummary(true);\n    }\n  };\n  var answerChange = function answerChange(text) {\n    var newAnswers = _toConsumableArray(userAnswers);\n    newAnswers[currentQuestionIndex] = text;\n    setUserAnswers(newAnswers);\n  };\n  if (showSummary) {\n    return _jsx(Summary, {\n      triviaItems: triviaItems,\n      userAnswers: userAnswers\n    });\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.titleStyle,\n      children: triviaName\n    }), _jsxs(View, {\n      style: styles.questionContainer,\n      children: [_jsx(Text, {\n        style: styles.promptStyle,\n        children: triviaItems[currentQuestionIndex].prompt\n      }), _jsx(Input, {\n        inputStyle: styles.inputStyle,\n        placeholder: \"Enter answer here\",\n        value: userAnswers[currentQuestionIndex],\n        onChangeText: answerChange\n      })]\n    }), _jsx(View, {\n      style: styles.buttonContainer,\n      children: _jsx(Button, {\n        buttonStyle: styles.buttonStyle,\n        titleStyle: styles.buttonTitleStyle,\n        title: \"Next\",\n        onPress: nextQuestion\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#190840'\n  },\n  titleStyle: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: 'white',\n    marginLeft: 20,\n    marginTop: 20\n  },\n  promptStyle: {\n    fontSize: 25,\n    color: 'white',\n    marginBottom: 50,\n    textAlign: 'center',\n    marginTop: 20\n  },\n  inputStyle: {\n    color: 'white',\n    alignSelf: 'center',\n    fontSize: 25\n  },\n  buttonStyle: {\n    backgroundColor: '#26A646',\n    height: 60,\n    borderRadius: 10\n  },\n  buttonContainer: {\n    position: 'absolute',\n    bottom: 16,\n    left: 16,\n    right: 16\n  },\n  questionContainer: {\n    marginTop: 150\n  },\n  buttonTitleStyle: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useState","Text","Input","Button","View","StyleSheet","Summary","jsx","_jsx","jsxs","_jsxs","UserInput","_ref","route","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","currentQuestionIndex","setCurrentQuestionIndex","_useState3","Array","length","fill","_useState4","userAnswers","setUserAnswers","_useState5","_useState6","showSummary","setShowSummary","nextQuestion","answerChange","text","newAnswers","_toConsumableArray","style","styles","container","children","titleStyle","questionContainer","promptStyle","prompt","inputStyle","placeholder","value","onChangeText","buttonContainer","buttonStyle","buttonTitleStyle","title","onPress","create","flex","backgroundColor","fontSize","fontWeight","marginBottom","color","marginLeft","marginTop","textAlign","alignSelf","height","borderRadius","position","bottom","left","right"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/UserInput/UserInput.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Input, Button } from '@rneui/themed'\nimport { View, StyleSheet } from 'react-native'\nimport Summary from '../Summary/Summary'\n\n\nexport default function UserInput ({ route }) {\n  const { triviaName, triviaItems } = route.params\n  const [ currentQuestionIndex, setCurrentQuestionIndex ] = useState(0)\n  const [userAnswers, setUserAnswers] = useState(Array(triviaItems.length).fill(\"\"))\n  const [showSummary, setShowSummary] = useState(false)\n\n  // updates the state of the component based on the current index of the question being shown\n  const nextQuestion = () => {\n    //if current question index is less than the total number of trivia items, the state is updated by incrementing the current question index by 1\n    if (currentQuestionIndex < triviaItems.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\n    } else {\n      //if at the last index, showSummary state is set to true and the Summary component is rendered\n      setShowSummary(true)\n    }\n  }\n\n  //updates the state of the component with the text inputed by the user\n  const answerChange = (text) => {\n    const newAnswers = [...userAnswers]\n    newAnswers[currentQuestionIndex] = text\n    setUserAnswers(newAnswers)\n  }\n\n  //if showSummary is true, the Summary component is rendered\n  if (showSummary) {\n    return <Summary triviaItems={triviaItems} userAnswers={userAnswers} />\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.titleStyle}>{triviaName}</Text>\n      <View style={styles.questionContainer}>\n        <Text style={styles.promptStyle}>{triviaItems[currentQuestionIndex].prompt}</Text>\n        <Input \n          inputStyle={styles.inputStyle}\n          placeholder='Enter answer here'\n          value={userAnswers[currentQuestionIndex]} \n          onChangeText={answerChange} \n        />\n      </View>\n      <View style={styles.buttonContainer}>\n        <Button buttonStyle={styles.buttonStyle} titleStyle={styles.buttonTitleStyle} title=\"Next\" onPress={nextQuestion} />\n      </View>\n    </View>\n  )\n}\n\n//styling\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#190840',\n  },\n  titleStyle: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: 'white',\n    marginLeft: 20,\n    marginTop: 20\n  },\n  promptStyle: {\n    fontSize: 25, \n    color: 'white',\n    marginBottom: 50,\n    textAlign: 'center',\n    marginTop: 20\n  },\n  inputStyle: {\n    color: 'white',\n    alignSelf: 'center',\n    fontSize: 25\n  },\n  buttonStyle: {\n    backgroundColor: '#26A646',\n    height: 60,\n    borderRadius: 10\n  },\n  buttonContainer: {\n    position: 'absolute',\n    bottom: 16,\n    left: 16,\n    right: 16,\n  },\n  questionContainer: {\n     marginTop: 150\n  },\n  buttonTitleStyle: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}