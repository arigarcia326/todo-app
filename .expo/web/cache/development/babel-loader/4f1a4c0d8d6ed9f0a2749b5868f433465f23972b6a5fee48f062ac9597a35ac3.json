{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Text, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Matching(_ref) {\n  var triviaData = _ref.triviaData;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    userAnswer = _useState2[0],\n    setUserAnswer = _useState2[1];\n  var checkAnswers = function checkAnswers() {\n    var isCorrect = userAnswer.every(function (answer) {\n      return triviaData.triviaItems[0].correctAnswer.some(function (correctAnswer) {\n        return answer.option === correctAnswer.option && answer.value === correctAnswer.value;\n      });\n    });\n    if (isCorrect) {\n      alert('All answers are correct!');\n    } else {\n      alert('Some answers are incorrect. Please try again.');\n    }\n    setUserAnswer([]);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.prompt,\n      children: triviaData.triviaItems[0].prompt\n    }), _jsxs(View, {\n      style: styles.choicesContainer,\n      children: [_jsx(View, {\n        style: styles.answersContainer,\n        children: triviaData.triviaItems[0].answer.map(function (answer) {\n          return _jsx(TouchableOpacity, {\n            style: styles.answerButton,\n            onPress: function onPress() {\n              return setUserAnswer([].concat(_toConsumableArray(userAnswer), [{\n                option: answer.option,\n                value: ''\n              }]));\n            },\n            children: _jsx(Text, {\n              style: styles.answerButtonText,\n              children: answer.option\n            })\n          }, answer.option);\n        })\n      }), _jsx(View, {\n        style: styles.targetsContainer,\n        children: triviaData.triviaItems[0].correctAnswer.map(function (correctAnswer) {\n          return _jsx(TouchableOpacity, {\n            style: styles.targetButton,\n            onPress: function onPress() {\n              var updatedUserAnswer = _toConsumableArray(userAnswer);\n              var index = updatedUserAnswer.findIndex(function (answer) {\n                return answer.option === correctAnswer.option;\n              });\n              updatedUserAnswer[index].value = correctAnswer.value;\n              setUserAnswer(updatedUserAnswer);\n              if (updatedUserAnswer.length === triviaData.triviaItems[0].answer.length) {\n                checkAnswers();\n              }\n            },\n            children: _jsx(Text, {\n              style: styles.targetButtonText,\n              children: correctAnswer.value\n            })\n          }, correctAnswer.value);\n        })\n      })]\n    })]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  prompt: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16\n  },\n  choicesContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  answersContainer: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  answerButton: {\n    borderWidth: 1,\n    borderColor: 'black',\n    padding: 8,\n    marginVertical: 8\n  },\n  answerButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  targetsContainer: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  targetButton: {\n    borderWidth: 1,\n    borderColor: 'black',\n    padding: 8,\n    marginVertical: 8\n  },\n  targetButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useState","Text","Button","View","FlatList","jsx","_jsx","jsxs","_jsxs","Matching","_ref","triviaData","_useState","_useState2","_slicedToArray","userAnswer","setUserAnswer","checkAnswers","isCorrect","every","answer","triviaItems","correctAnswer","some","option","value","alert","style","styles","container","children","prompt","choicesContainer","answersContainer","map","TouchableOpacity","answerButton","onPress","concat","_toConsumableArray","answerButtonText","targetsContainer","targetButton","updatedUserAnswer","index","findIndex","length","targetButtonText","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","marginBottom","flexDirection","borderWidth","borderColor","padding","marginVertical"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Button } from '@rneui/themed'\nimport { View, FlatList } from 'react-native'\n\n\nexport default function Matching({ triviaData }) {\n  const [userAnswer, setUserAnswer] = useState([]);\n  \n  const checkAnswers = () => {\n    const isCorrect = userAnswer.every(answer => {\n      return triviaData.triviaItems[0].correctAnswer.some(correctAnswer => {\n        return answer.option === correctAnswer.option && answer.value === correctAnswer.value;\n      });\n    });\n    if (isCorrect) {\n      alert('All answers are correct!');\n    } else {\n      alert('Some answers are incorrect. Please try again.');\n    }\n    setUserAnswer([]);\n  };\n  \n  return (\n    <View style={styles.container}>\n      <Text style={styles.prompt}>{triviaData.triviaItems[0].prompt}</Text>\n      <View style={styles.choicesContainer}>\n        <View style={styles.answersContainer}>\n          {triviaData.triviaItems[0].answer.map(answer => (\n            <TouchableOpacity\n              key={answer.option}\n              style={styles.answerButton}\n              onPress={() => setUserAnswer([...userAnswer, { option: answer.option, value: '' }])}\n            >\n              <Text style={styles.answerButtonText}>{answer.option}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n        <View style={styles.targetsContainer}>\n          {triviaData.triviaItems[0].correctAnswer.map(correctAnswer => (\n            <TouchableOpacity\n              key={correctAnswer.value}\n              style={styles.targetButton}\n              onPress={() => {\n                const updatedUserAnswer = [...userAnswer];\n                const index = updatedUserAnswer.findIndex(answer => answer.option === correctAnswer.option);\n                updatedUserAnswer[index].value = correctAnswer.value;\n                setUserAnswer(updatedUserAnswer);\n                if (updatedUserAnswer.length === triviaData.triviaItems[0].answer.length) {\n                  checkAnswers();\n                }\n              }}\n            >\n              <Text style={styles.targetButtonText}>{correctAnswer.value}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  prompt: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  choicesContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  answersContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  answerButton: {\n    borderWidth: 1,\n    borderColor: 'black',\n    padding: 8,\n    marginVertical: 8,\n  },\n  answerButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  targetsContainer: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  targetButton: {\n    borderWidth: 1,\n    borderColor: 'black',\n    padding: 8,\n    marginVertical: 8,\n  },\n  targetButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}