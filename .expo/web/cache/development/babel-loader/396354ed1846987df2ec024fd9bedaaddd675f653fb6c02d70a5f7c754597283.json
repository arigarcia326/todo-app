{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Completed(_ref) {\n  var tasks = _ref.tasks;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    completedTasks = _useState2[0],\n    setCompletedTasks = _useState2[1];\n  useEffect(function () {\n    var updatedCompletedTasks = tasks.filter(function (task) {\n      return task.completed;\n    });\n    setCompletedTasks(updatedCompletedTasks);\n  }, [tasks]);\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showCompleted = _useState4[0],\n    setShowCompleted = _useState4[1];\n  var toggleShowCompleted = function toggleShowCompleted() {\n    setShowCompleted(!showCompleted);\n  };\n  return _jsxs(View, {\n    children: [_jsx(TouchableOpacity, {\n      onPress: toggleShowCompleted,\n      children: _jsx(Text, {\n        children: \"Show Completed Tasks\"\n      })\n    }), showCompleted && completedTasks.map(function (task) {\n      return _jsx(Text, {\n        style: {\n          textDecorationLine: 'line-through'\n        },\n        children: task.description\n      }, task.id);\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","TouchableOpacity","Text","View","jsx","_jsx","jsxs","_jsxs","Completed","_ref","tasks","_useState","_useState2","_slicedToArray","completedTasks","setCompletedTasks","useEffect","updatedCompletedTasks","filter","task","completed","_useState3","_useState4","showCompleted","setShowCompleted","toggleShowCompleted","children","onPress","map","style","textDecorationLine","description","id"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { TouchableOpacity, Text, View } from 'react-native'\n\n\nexport default function Completed({ tasks }) {\n  const [completedTasks, setCompletedTasks] = useState([]);\n\n  useEffect(() => {\n    const updatedCompletedTasks = tasks.filter((task) => task.completed);\n    setCompletedTasks(updatedCompletedTasks);\n  }, [tasks]);\n\n  const [showCompleted, setShowCompleted] = useState(false);\n\n  const toggleShowCompleted = () => {\n    setShowCompleted(!showCompleted);\n  };\n\n  return (\n    <View>\n      <TouchableOpacity onPress={toggleShowCompleted}>\n        <Text>Show Completed Tasks</Text>\n      </TouchableOpacity>\n      {showCompleted &&\n        completedTasks.map((task) => (\n          <Text key={task.id} style={{ textDecorationLine: 'line-through' }}>\n            {task.description}\n          </Text>\n        ))}\n    </View>\n  );\n}\n\n\n\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAIvC,eAAe,SAASC,SAASA,CAAAC,IAAA,EAAY;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACvC,IAAAC,SAAA,GAA4CX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EAExCI,SAAS,CAAC,YAAM;IACd,IAAMC,qBAAqB,GAAGP,KAAK,CAACQ,MAAM,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACC,SAAS;IAAA,EAAC;IACpEL,iBAAiB,CAACE,qBAAqB,CAAC;EAC1C,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EAEX,IAAAW,UAAA,GAA0CrB,QAAQ,CAAC,KAAK,CAAC;IAAAsB,UAAA,GAAAT,cAAA,CAAAQ,UAAA;IAAlDE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EAEtC,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;IAChCD,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;EAED,OACEhB,KAAA,CAACJ,IAAI;IAAAuB,QAAA,GACHrB,IAAA,CAACJ,gBAAgB;MAAC0B,OAAO,EAAEF,mBAAoB;MAAAC,QAAA,EAC7CrB,IAAA,CAACH,IAAI;QAAAwB,QAAA,EAAC;MAAoB;IAAO,EAChB,EAClBH,aAAa,IACZT,cAAc,CAACc,GAAG,CAAC,UAACT,IAAI;MAAA,OACtBd,IAAA,CAACH,IAAI;QAAe2B,KAAK,EAAE;UAAEC,kBAAkB,EAAE;QAAe,CAAE;QAAAJ,QAAA,EAC/DP,IAAI,CAACY;MAAW,GADRZ,IAAI,CAACa,EAAE,CAEX;IAAA,CACR,CAAC;EAAA,EACC;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}