{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState } from 'react';\nimport { Text, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Matching(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOptions = _useState2[0],\n    setSelectedOptions = _useState2[1];\n  var handleOptionPress = function handleOptionPress(item, option) {\n    var updatedSelectedOptions = _objectSpread(_objectSpread({}, selectedOptions), {}, _defineProperty({}, item.prompt, option.value));\n    setSelectedOptions(updatedSelectedOptions);\n  };\n  var handleCheckAnswers = function handleCheckAnswers() {\n    var isAllMatched = triviaItems.every(function (item) {\n      return item.answer.every(function (option) {\n        return selectedOptions[option.prompt] === option.value;\n      });\n    });\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      children: [_jsx(Text, {\n        children: item.prompt\n      }), item.answer.map(function (option, index) {\n        return _jsxs(View, {\n          children: [_jsx(Button, {\n            onPress: function onPress() {\n              return handleOptionPress(option);\n            },\n            children: option.option\n          }), _jsx(Button, {\n            onPress: function onPress() {\n              return handleOptionPress(option);\n            },\n            children: option.value\n          })]\n        }, index);\n      })]\n    });\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: triviaName\n    }), _jsx(FlatList, {\n      data: triviaItems,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.prompt;\n      }\n    }), _jsx(Button, {\n      onPress: handleCheckAnswers,\n      children: _jsx(Text, {\n        children: \"Check Answers\"\n      })\n    })]\n  });\n}\n;","map":{"version":3,"names":["React","useState","Text","Button","View","FlatList","jsx","_jsx","jsxs","_jsxs","Matching","_ref","route","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","selectedOptions","setSelectedOptions","handleOptionPress","item","option","updatedSelectedOptions","_objectSpread","_defineProperty","prompt","value","handleCheckAnswers","isAllMatched","every","answer","alert","renderItem","_ref2","children","map","index","onPress","data","keyExtractor"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Button } from '@rneui/themed'\nimport { View, FlatList } from 'react-native'\n\n\nexport default function Matching ({ route }) {\n  const { triviaName, triviaItems } = route.params;\n  const [selectedOptions, setSelectedOptions] = useState({});\n\n  const handleOptionPress = (item, option) => {\n    const updatedSelectedOptions = { ...selectedOptions, [item.prompt]: option.value };\n    setSelectedOptions(updatedSelectedOptions);\n  };\n\n  const handleCheckAnswers = () => {\n    const isAllMatched = triviaItems.every((item) =>\n      item.answer.every((option) => selectedOptions[option.prompt] === option.value)\n    );\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n\n  const renderItem = ({ item }) => (\n    <View>\n      <Text>{item.prompt}</Text>\n      {item.answer.map((option, index) => (\n        <View key={index}>\n          <Button onPress={() => handleOptionPress(option)}>{option.option}</Button>\n          <Button onPress={() => handleOptionPress(option)}>{option.value}</Button>\n        </View>\n      ))}\n    </View>\n  )\n\n  return (\n    <View>\n      <Text>{triviaName}</Text>\n      <FlatList\n        data={triviaItems}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.prompt}\n      />\n      <Button onPress={handleCheckAnswers}>\n        <Text>Check Answers</Text>\n      </Button>\n    </View>\n  );\n};\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}