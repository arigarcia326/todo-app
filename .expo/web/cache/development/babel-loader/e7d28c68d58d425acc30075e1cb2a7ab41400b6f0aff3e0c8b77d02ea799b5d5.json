{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Text, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Matching(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOption = _useState2[0],\n    setSelectedOption = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedValue = _useState4[0],\n    setSelectedValue = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    matchedItems = _useState6[0],\n    setMatchedItems = _useState6[1];\n  var handleOptionPress = function handleOptionPress(option) {\n    setSelectedOption(option);\n  };\n  var handleValuePress = function handleValuePress(value) {\n    if (selectedOption) {\n      setSelectedValue(value);\n      setMatchedItems([].concat(_toConsumableArray(matchedItems), [{\n        option: selectedOption,\n        value: value\n      }]));\n      setSelectedOption(null);\n    }\n  };\n  var handleCheckAnswers = function handleCheckAnswers() {\n    var isAllMatched = matchedItems.length === triviaItems.length;\n    if (isAllMatched) {\n      var isAllCorrect = matchedItems.every(function (item) {\n        return triviaItems.find(function (t) {\n          return t.option === item.option && t.value === item.value;\n        });\n      });\n      if (isAllCorrect) {\n        alert('All items are matched and correct!');\n      } else {\n        alert('All items are matched but not all answers are correct.');\n      }\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: [_jsx(Button, {\n        onPress: function onPress() {\n          return handleOptionPress(item.option);\n        },\n        buttonStyle: {\n          backgroundColor: selectedOption === item.option ? 'green' : 'white'\n        },\n        children: item.option\n      }), _jsx(Button, {\n        onPress: function onPress() {\n          return handleValuePress(item.value);\n        },\n        buttonStyle: {\n          backgroundColor: matchedItems.some(function (i) {\n            return i.value === item.value;\n          }) ? 'green' : selectedValue === item.value ? 'yellow' : 'white'\n        },\n        children: item.value\n      })]\n    }, item.prompt + \"_\" + option.option);\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: triviaName\n    }), _jsx(FlatList, {\n      data: triviaItems,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.option;\n      }\n    }), _jsx(Button, {\n      onPress: handleCheckAnswers,\n      children: _jsx(Text, {\n        children: \"Check Answers\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","Text","Button","View","FlatList","jsx","_jsx","jsxs","_jsxs","Matching","_ref","route","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","selectedOption","setSelectedOption","_useState3","_useState4","selectedValue","setSelectedValue","_useState5","_useState6","matchedItems","setMatchedItems","handleOptionPress","option","handleValuePress","value","concat","_toConsumableArray","handleCheckAnswers","isAllMatched","length","isAllCorrect","every","item","find","t","alert","renderItem","_ref2","style","flexDirection","children","onPress","buttonStyle","backgroundColor","some","i","prompt","data","keyExtractor"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Button } from '@rneui/themed'\nimport { View, FlatList } from 'react-native'\n\n\nexport default function Matching({ route }) {\n  const { triviaName, triviaItems } = route.params;\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [selectedValue, setSelectedValue] = useState(null);\n  const [matchedItems, setMatchedItems] = useState([]);\n\n  const handleOptionPress = (option) => {\n    setSelectedOption(option);\n  };\n\n  const handleValuePress = (value) => {\n    if (selectedOption) {\n      setSelectedValue(value);\n      setMatchedItems([...matchedItems, { option: selectedOption, value }]);\n      setSelectedOption(null);\n    }\n  };\n\n  const handleCheckAnswers = () => {\n    const isAllMatched = matchedItems.length === triviaItems.length;\n    if (isAllMatched) {\n      const isAllCorrect = matchedItems.every(\n        (item) =>\n          triviaItems.find((t) => t.option === item.option && t.value === item.value)\n      );\n      if (isAllCorrect) {\n        alert('All items are matched and correct!');\n      } else {\n        alert('All items are matched but not all answers are correct.');\n      }\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n\n  const renderItem = ({ item }) => (\n    <View style={{ flexDirection: 'row' }}  key={`${item.prompt}_${option.option}`}>\n      <Button\n        onPress={() => handleOptionPress(item.option)}\n        buttonStyle={{\n          backgroundColor: selectedOption === item.option ? 'green' : 'white',\n        }}\n      >\n        {item.option}\n      </Button>\n      <Button\n        onPress={() => handleValuePress(item.value)}\n        buttonStyle={{\n          backgroundColor: matchedItems.some((i) => i.value === item.value)\n            ? 'green'\n            : selectedValue === item.value\n            ? 'yellow'\n            : 'white',\n        }}\n      >\n        {item.value}\n      </Button>\n    </View>\n  );\n\n  return (\n    <View>\n      <Text>{triviaName}</Text>\n      <FlatList\n        data={triviaItems}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.option}\n      />\n      <Button onPress={handleCheckAnswers}>\n        <Text>Check Answers</Text>\n      </Button>\n    </View>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,MAAM,QAAQ,eAAe;AAAA,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAI5C,eAAe,SAASC,QAAQA,CAAAC,IAAA,EAAY;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACtC,IAAAC,aAAA,GAAoCD,KAAK,CAACE,MAAM;IAAxCC,UAAU,GAAAF,aAAA,CAAVE,UAAU;IAAEC,WAAW,GAAAH,aAAA,CAAXG,WAAW;EAE/B,IAAAC,SAAA,GAA4ChB,QAAQ,CAAC,IAAI,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EACxC,IAAAI,UAAA,GAA0CrB,QAAQ,CAAC,IAAI,CAAC;IAAAsB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjDE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EACtC,IAAAG,UAAA,GAAwCzB,QAAQ,CAAC,EAAE,CAAC;IAAA0B,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA7CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAEpC,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,MAAM,EAAK;IACpCV,iBAAiB,CAACU,MAAM,CAAC;EAC3B,CAAC;EAED,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,KAAK,EAAK;IAClC,IAAIb,cAAc,EAAE;MAClBK,gBAAgB,CAACQ,KAAK,CAAC;MACvBJ,eAAe,IAAAK,MAAA,CAAAC,kBAAA,CAAKP,YAAY,IAAE;QAAEG,MAAM,EAAEX,cAAc;QAAEa,KAAK,EAALA;MAAM,CAAC,GAAE;MACrEZ,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF,CAAC;EAED,IAAMe,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/B,IAAMC,YAAY,GAAGT,YAAY,CAACU,MAAM,KAAKtB,WAAW,CAACsB,MAAM;IAC/D,IAAID,YAAY,EAAE;MAChB,IAAME,YAAY,GAAGX,YAAY,CAACY,KAAK,CACrC,UAACC,IAAI;QAAA,OACHzB,WAAW,CAAC0B,IAAI,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,CAACZ,MAAM,KAAKU,IAAI,CAACV,MAAM,IAAIY,CAAC,CAACV,KAAK,KAAKQ,IAAI,CAACR,KAAK;QAAA,EAAC;MAAA,EAC9E;MACD,IAAIM,YAAY,EAAE;QAChBK,KAAK,CAAC,oCAAoC,CAAC;MAC7C,CAAC,MAAM;QACLA,KAAK,CAAC,wDAAwD,CAAC;MACjE;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAED,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,KAAA;IAAA,IAAML,IAAI,GAAAK,KAAA,CAAJL,IAAI;IAAA,OACxBhC,KAAA,CAACL,IAAI;MAAC2C,KAAK,EAAE;QAAEC,aAAa,EAAE;MAAM,CAAE;MAAAC,QAAA,GACpC1C,IAAA,CAACJ,MAAM;QACL+C,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMpB,iBAAiB,CAACW,IAAI,CAACV,MAAM,CAAC;QAAA,CAAC;QAC9CoB,WAAW,EAAE;UACXC,eAAe,EAAEhC,cAAc,KAAKqB,IAAI,CAACV,MAAM,GAAG,OAAO,GAAG;QAC9D,CAAE;QAAAkB,QAAA,EAEDR,IAAI,CAACV;MAAM,EACL,EACTxB,IAAA,CAACJ,MAAM;QACL+C,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMlB,gBAAgB,CAACS,IAAI,CAACR,KAAK,CAAC;QAAA,CAAC;QAC5CkB,WAAW,EAAE;UACXC,eAAe,EAAExB,YAAY,CAACyB,IAAI,CAAC,UAACC,CAAC;YAAA,OAAKA,CAAC,CAACrB,KAAK,KAAKQ,IAAI,CAACR,KAAK;UAAA,EAAC,GAC7D,OAAO,GACPT,aAAa,KAAKiB,IAAI,CAACR,KAAK,GAC5B,QAAQ,GACR;QACN,CAAE;QAAAgB,QAAA,EAEDR,IAAI,CAACR;MAAK,EACJ;IAAA,GApBqCQ,IAAI,CAACc,MAAM,SAAIxB,MAAM,CAACA,MAAM,CAqBrE;EAAA,CACR;EAED,OACEtB,KAAA,CAACL,IAAI;IAAA6C,QAAA,GACH1C,IAAA,CAACL,IAAI;MAAA+C,QAAA,EAAElC;IAAU,EAAQ,EACzBR,IAAA,CAACF,QAAQ;MACPmD,IAAI,EAAExC,WAAY;MAClB6B,UAAU,EAAEA,UAAW;MACvBY,YAAY,EAAE,SAAAA,aAAChB,IAAI;QAAA,OAAKA,IAAI,CAACV,MAAM;MAAA;IAAC,EACpC,EACFxB,IAAA,CAACJ,MAAM;MAAC+C,OAAO,EAAEd,kBAAmB;MAAAa,QAAA,EAClC1C,IAAA,CAACL,IAAI;QAAA+C,QAAA,EAAC;MAAa;IAAO,EACnB;EAAA,EACJ;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}