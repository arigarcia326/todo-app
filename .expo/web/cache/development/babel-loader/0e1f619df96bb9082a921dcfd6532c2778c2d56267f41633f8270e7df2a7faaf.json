{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState } from 'react';\nimport { Text, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Matching(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState(updatedTriviaItems),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOptions = _useState2[0],\n    setSelectedOptions = _useState2[1];\n  var updatedTriviaItems = triviaItems.map(function (item) {\n    var updatedAnswer = item.answer.map(function (option) {\n      return _objectSpread(_objectSpread({}, option), {}, {\n        isSelected: false\n      });\n    });\n    return _objectSpread(_objectSpread({}, item), {}, {\n      answer: updatedAnswer\n    });\n  });\n  var handleOptionPress = function handleOptionPress(item, option) {\n    var updatedSelectedOptions = selectedOptions.map(function (triviaItem) {\n      if (triviaItem.prompt === item.prompt) {\n        var updatedAnswer = triviaItem.answer.map(function (answerOption) {\n          if (answerOption.value === option.value || answerOption.option === option.option) {\n            return _objectSpread(_objectSpread({}, answerOption), {}, {\n              isSelected: true\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, answerOption), {}, {\n              isSelected: false\n            });\n          }\n        });\n        return _objectSpread(_objectSpread({}, triviaItem), {}, {\n          answer: updatedAnswer\n        });\n      } else {\n        return triviaItem;\n      }\n    });\n    setSelectedOptions(updatedSelectedOptions);\n  };\n  var handleCheckAnswers = function handleCheckAnswers() {\n    var isAllMatched = triviaItems.every(function (item) {\n      return item.answer && item.answer.every(function (option) {\n        var selectedOption = selectedOptions.find(function (selectedOption) {\n          return selectedOption.prompt === item.prompt;\n        });\n        return selectedOption.answer.some(function (answerOption) {\n          return answerOption.isSelected && answerOption.value === option.value;\n        });\n      });\n    });\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      children: [_jsx(Text, {\n        children: item.prompt\n      }), item.answer.map(function (option, index) {\n        return _jsxs(View, {\n          children: [_jsx(Button, {\n            onPress: function onPress() {\n              return handleOptionPress(item, option);\n            },\n            style: {\n              backgroundColor: option.isSelected ? 'green' : 'white'\n            },\n            children: option.option\n          }), _jsx(Button, {\n            onPress: function onPress() {\n              return handleOptionPress(item, option);\n            },\n            style: {\n              backgroundColor: option.isSelected ? 'green' : 'white'\n            },\n            children: option.value\n          })]\n        }, index);\n      })]\n    });\n  };\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: triviaName\n    }), _jsx(FlatList, {\n      data: selectedOptions,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.prompt;\n      }\n    }), _jsx(Button, {\n      onPress: handleCheckAnswers,\n      children: _jsx(Text, {\n        children: \"Check Answers\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","Text","Button","View","FlatList","jsx","_jsx","jsxs","_jsxs","Matching","_ref","route","_route$params","params","triviaName","triviaItems","_useState","updatedTriviaItems","_useState2","_slicedToArray","selectedOptions","setSelectedOptions","map","item","updatedAnswer","answer","option","_objectSpread","isSelected","handleOptionPress","updatedSelectedOptions","triviaItem","prompt","answerOption","value","handleCheckAnswers","isAllMatched","every","selectedOption","find","some","alert","renderItem","_ref2","children","index","onPress","style","backgroundColor","data","keyExtractor"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/Matching/Matching.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, Button } from '@rneui/themed'\nimport { View, FlatList } from 'react-native'\n\n\nexport default function Matching ({ route }) {\n  const { triviaName, triviaItems } = route.params;\n  const [selectedOptions, setSelectedOptions] = useState(updatedTriviaItems);\n\n  const updatedTriviaItems = triviaItems.map(item => {\n    const updatedAnswer = item.answer.map(option => {\n      return { ...option, isSelected: false };\n    });\n    return { ...item, answer: updatedAnswer };\n  });\n\n  const handleOptionPress = (item, option) => {\n    const updatedSelectedOptions = selectedOptions.map(triviaItem => {\n      if (triviaItem.prompt === item.prompt) {\n        const updatedAnswer = triviaItem.answer.map(answerOption => {\n          if (answerOption.value === option.value || answerOption.option === option.option) {\n            return { ...answerOption, isSelected: true };\n          } else {\n            return { ...answerOption, isSelected: false };\n          }\n        });\n        return { ...triviaItem, answer: updatedAnswer };\n      } else {\n        return triviaItem;\n      }\n    });\n    setSelectedOptions(updatedSelectedOptions);\n  };\n\n  const handleCheckAnswers = () => {\n    const isAllMatched = triviaItems.every((item) =>\n      item.answer && item.answer.every((option) => {\n        const selectedOption = selectedOptions.find(selectedOption => selectedOption.prompt === item.prompt);\n        return selectedOption.answer.some(answerOption => answerOption.isSelected && answerOption.value === option.value);\n      })\n    );\n    if (isAllMatched) {\n      alert('All items are matched!');\n    } else {\n      alert('Not all items are matched.');\n    }\n  };\n  \n  const renderItem = ({ item }) => (\n    <View>\n      <Text>{item.prompt}</Text>\n      {item.answer.map((option, index) => (\n        <View key={index}>\n          <Button \n            onPress={() => handleOptionPress(item, option)} \n            style={{ backgroundColor: option.isSelected ? 'green' : 'white' }}\n          >\n            {option.option}\n          </Button>\n          <Button \n            onPress={() => handleOptionPress(item, option)} \n            style={{ backgroundColor: option.isSelected ? 'green' : 'white' }}\n          >\n            {option.value}\n          </Button>\n        </View>\n      ))}\n    </View>\n  )\n\n\n  return (\n    <View>\n      <Text>{triviaName}</Text>\n      <FlatList\n        data={selectedOptions}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.prompt}\n      />\n      <Button onPress={handleCheckAnswers}>\n        <Text>Check Answers</Text>\n      </Button>\n    </View>\n  );\n}\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}