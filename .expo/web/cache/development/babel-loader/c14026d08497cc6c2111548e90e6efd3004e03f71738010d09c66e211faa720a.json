{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Text, Input, Button } from '@rneui/themed';\nimport View from \"react-native-web/dist/exports/View\";\nimport Summary from \"../Summary/Summary\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function UserInput(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    triviaName = _route$params.triviaName,\n    triviaItems = _route$params.triviaItems;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestionIndex = _useState2[0],\n    setCurrentQuestionIndex = _useState2[1];\n  var _useState3 = useState(Array(triviaItems.length).fill(\"\")),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userAnswers = _useState4[0],\n    setUserAnswers = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showSummary = _useState6[0],\n    setShowSummary = _useState6[1];\n  var handleNextQuestion = function handleNextQuestion() {\n    if (currentQuestionIndex < triviaItems.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setShowSummary(true);\n    }\n  };\n  var handleAnswerChange = function handleAnswerChange(text) {\n    var newAnswers = _toConsumableArray(userAnswers);\n    newAnswers[currentQuestionIndex] = text;\n    setUserAnswers(newAnswers);\n  };\n  if (showSummary) {\n    return _jsx(Summary, {\n      triviaItems: triviaItems,\n      userAnswers: userAnswers\n    });\n  }\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: triviaName\n    }), _jsx(Text, {\n      children: triviaItems[currentQuestionIndex].prompt\n    }), _jsx(Input, {\n      value: userAnswers[currentQuestionIndex],\n      onChangeText: handleAnswerChange\n    }), _jsx(Button, {\n      title: \"Next\",\n      onPress: handleNextQuestion\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#190840',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  triviaTitle: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    color: 'white',\n    textAlign: 'center',\n    marginTop: 20\n  },\n  subtitle: {\n    color: 'white',\n    fontSize: 30,\n    textAlign: 'center',\n    marginTop: 10\n  },\n  buttonContainer: {\n    marginTop: 30,\n    paddingTop: 10\n  },\n  buttonTitle: {\n    fontSize: 30,\n    fontWeight: 'bold'\n  },\n  buttonStyle: {\n    width: 300,\n    height: 70,\n    borderRadius: 10,\n    backgroundColor: '#DB2EF2'\n  }\n});","map":{"version":3,"names":["React","useState","Text","Input","Button","View","Summary","jsx","_jsx","jsxs","_jsxs","UserInput","_ref","route","_route$params","params","triviaName","triviaItems","_useState","_useState2","_slicedToArray","currentQuestionIndex","setCurrentQuestionIndex","_useState3","Array","length","fill","_useState4","userAnswers","setUserAnswers","_useState5","_useState6","showSummary","setShowSummary","handleNextQuestion","handleAnswerChange","text","newAnswers","_toConsumableArray","children","prompt","value","onChangeText","title","onPress","styles","StyleSheet","create","container","flex","backgroundColor","justifyContent","alignItems","triviaTitle","fontSize","fontWeight","color","textAlign","marginTop","subtitle","buttonContainer","paddingTop","buttonTitle","buttonStyle","width","height","borderRadius"],"sources":["/Users/arianagarciafundora/Desktop/todo-app/src/components/userInput/userInput.js"],"sourcesContent":["import React, {useState} from 'react'\nimport { Text, Input, Button } from '@rneui/themed'\nimport { View } from 'react-native';\nimport Summary from '../Summary/Summary';\n\nexport default function UserInput ({ route }) {\n  const { triviaName, triviaItems } = route.params;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState(Array(triviaItems.length).fill(\"\"));\n  const [showSummary, setShowSummary] = useState(false);\n\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < triviaItems.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setShowSummary(true);\n    }\n  };\n\n  const handleAnswerChange = (text) => {\n    const newAnswers = [...userAnswers];\n    newAnswers[currentQuestionIndex] = text;\n    setUserAnswers(newAnswers);\n  };\n\n  if (showSummary) {\n    return <Summary triviaItems={triviaItems} userAnswers={userAnswers} />;\n  }\n\n  return (\n    <View>\n      <Text>{triviaName}</Text>\n      <Text>{triviaItems[currentQuestionIndex].prompt}</Text>\n      <Input value={userAnswers[currentQuestionIndex]} onChangeText={handleAnswerChange} />\n      <Button title=\"Next\" onPress={handleNextQuestion} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#190840',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  triviaTitle: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    color: 'white',\n    textAlign: 'center',\n    marginTop: 20\n  },\n  subtitle: {\n    color: 'white',\n    fontSize: 30,\n    textAlign: 'center',\n    marginTop: 10\n  },\n  buttonContainer: {\n    marginTop: 30,\n    paddingTop: 10,\n    \n  },\n  buttonTitle: {\n    fontSize: 30,\n    fontWeight: 'bold'\n  },\n  buttonStyle: {\n    width: 300,\n    height: 70,\n    borderRadius: 10,\n    backgroundColor: '#DB2EF2'\n  }\n\n})\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,IAAI,EAAEC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AAAA,OAAAC,IAAA;AAEnD,OAAOC,OAAO;AAA2B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEzC,eAAe,SAASC,SAASA,CAAAC,IAAA,EAAa;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACxC,IAAAC,aAAA,GAAoCD,KAAK,CAACE,MAAM;IAAxCC,UAAU,GAAAF,aAAA,CAAVE,UAAU;IAAEC,WAAW,GAAAH,aAAA,CAAXG,WAAW;EAC/B,IAAAC,SAAA,GAAwDjB,QAAQ,CAAC,CAAC,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5DG,oBAAoB,GAAAF,UAAA;IAAEG,uBAAuB,GAAAH,UAAA;EACpD,IAAAI,UAAA,GAAsCtB,QAAQ,CAACuB,KAAK,CAACP,WAAW,CAACQ,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;IAAAC,UAAA,GAAAP,cAAA,CAAAG,UAAA;IAA3EK,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAClC,IAAAG,UAAA,GAAsC7B,QAAQ,CAAC,KAAK,CAAC;IAAA8B,UAAA,GAAAX,cAAA,CAAAU,UAAA;IAA9CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAElC,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/B,IAAIb,oBAAoB,GAAGJ,WAAW,CAACQ,MAAM,GAAG,CAAC,EAAE;MACjDH,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD,CAAC,MAAM;MACLY,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,IAAME,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,IAAI,EAAK;IACnC,IAAMC,UAAU,GAAAC,kBAAA,CAAOV,WAAW,CAAC;IACnCS,UAAU,CAAChB,oBAAoB,CAAC,GAAGe,IAAI;IACvCP,cAAc,CAACQ,UAAU,CAAC;EAC5B,CAAC;EAED,IAAIL,WAAW,EAAE;IACf,OAAOxB,IAAA,CAACF,OAAO;MAACW,WAAW,EAAEA,WAAY;MAACW,WAAW,EAAEA;IAAY,EAAG;EACxE;EAEA,OACElB,KAAA,CAACL,IAAI;IAAAkC,QAAA,GACH/B,IAAA,CAACN,IAAI;MAAAqC,QAAA,EAAEvB;IAAU,EAAQ,EACzBR,IAAA,CAACN,IAAI;MAAAqC,QAAA,EAAEtB,WAAW,CAACI,oBAAoB,CAAC,CAACmB;IAAM,EAAQ,EACvDhC,IAAA,CAACL,KAAK;MAACsC,KAAK,EAAEb,WAAW,CAACP,oBAAoB,CAAE;MAACqB,YAAY,EAAEP;IAAmB,EAAG,EACrF3B,IAAA,CAACJ,MAAM;MAACuC,KAAK,EAAC,MAAM;MAACC,OAAO,EAAEV;IAAmB,EAAG;EAAA,EAC/C;AAEX;AAEA,IAAMW,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDC,WAAW,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,KAAK,EAAE,OAAO;IACdC,SAAS,EAAE,QAAQ;IACnBC,SAAS,EAAE;EACb,CAAC;EACDC,QAAQ,EAAE;IACRH,KAAK,EAAE,OAAO;IACdF,QAAQ,EAAE,EAAE;IACZG,SAAS,EAAE,QAAQ;IACnBC,SAAS,EAAE;EACb,CAAC;EACDE,eAAe,EAAE;IACfF,SAAS,EAAE,EAAE;IACbG,UAAU,EAAE;EAEd,CAAC;EACDC,WAAW,EAAE;IACXR,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd,CAAC;EACDQ,WAAW,EAAE;IACXC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE,EAAE;IAChBhB,eAAe,EAAE;EACnB;AAEF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}